/**
 * Monorepo API
 * ## Data Format - ID - UUID v4 - Datetime - UTC, RFC3339, section 5.6 (ISO 8601 extended format). yyyy-MM-ddTHH:mm:ssZ  ## POST, PUT 時に設定するデータについて - 新しく採番が必要な ID はサーバー側で採番しますので POST 時は空欄で大丈夫です - CreatedAt, UpdatedAt, DeletedAt 等の日時もサーバーで設定しますので POST 時, PUT 時の設定不要です mm  ## Credit card information for test - [ja](https://faq.gmo-pg.com/service/detail.aspx?id=1679&a=102&isCrawler=1) - [en](https://www.paypalobjects.com/en_GB/vhelp/paypalmanager_help/credit_card_numbers.htm)  ## Quick Cash UseCase 1. (netive用)AccessToken取得 POST /members/findByMiney 1. (netive用)oneTimeToken取得 POST /members/{memberId}/oneTimeTokens/register 1. (webView用)AccessToken取得 POST /oneTimeTokens/{oneTimeToken}/revoke 1. 会員新規登録 POST /members/register 1. 会員新規登録認証コード入力 POST /members/register/verifySms 1. ログイン会員情報取得 GET /me 1. 規約同意登録 PUT /members/{memberId}/agreements/{agreementType} 1. 会員ログインsms入力 POST /members/login 1. 会員ログイン認証コード入力 POST /members/login/verifySms 1. 会員規約同意状況取得 GET /members/{memberId}/agreements/{agreementType} 1. 会員商品画像登録 POST /members/{memberId}/items 1. 会員商品画像認識結果取得 GET /members/{memberId}/items/{itemId}/negotiations/latest 1. 会員売却登録 POST /members/{memberId}/items/{itemId}/negotiations/established 1. 会員身分証明書画像登録 POST /members/{memberId}/identificationPhotos 1. 会員身分証明書提出 POST /members/{memberId}/identificationStatuses/requestVerify 1. 会員配送先取得 GET /members/{memberId}/address 1. 会員情報登録 PUT /members/{memberId} 1. 会員クレジットカード登録 PUT /members/{memberId}/creditCard 1. オーソリ POST /members/{memberId}/items/{itemId}/negotiations/{negotiationId}/creditAuthorizations/authorize 1. (ベリトランスから) GET(多分) /creditAuthorizations/{creditAuthorizationId}/veritrans/result 1. オーソリ結果取得 GET /members/{memberId}/items/{itemId}/negotiations/{memberItemNegotiationId}/creditAuthorizations/latest 1. 会員銀行口座登録 PUT /members/{memberId}/bankAccount 1. 集荷登録 POST /members/{memberId}/toOfficeDeliveries 1. 集荷状況取得 GET /members/{memberId}/toOfficeDeliveries  ## Operator Console UseCase 1. POST /operators/login 1. GET /members 1. GET /members/{memberId} 1. GET /members/{memberId}/bankAccount 1. GET /memberToOfficeDeliveries 1. GET /memberToOfficeDeliveries/{memberToOfficeDeliveryId} 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest = require('request');
import http = require('http');

/* tslint:disable:no-unused-locals */
    import { AccessToken } from '../';
    import { UNKNOWN_BASE_TYPE } from '../';

import { ObjectSerializer, Authentication, VoidAuth } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'http://localhost:3000';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

    export enum WipApiApiKeys {
    }

    export class WipApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
    'default': <Authentication>new VoidAuth(),
        }

        constructor(basePath?: string);
        constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
        if (basePath) {
        this.basePath = basePath;
        }
        } else {
        if (basePathOrUsername) {
        this.basePath = basePathOrUsername
        }
        }
        }

        set useQuerystring(value: boolean) {
        this._useQuerystring = value;
        }

        set basePath(basePath: string) {
        this._basePath = basePath;
        }

        get basePath() {
        return this._basePath;
        }

        public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
        }

        public setApiKey(key: WipApiApiKeys, value: string) {
        (this.authentications as any)[WipApiApiKeys[key]].apiKey = value;
        }

            /**
            * 
                * @param UNKNOWN_BASE_TYPE 
            */
            public async operatorsLoginPost (UNKNOWN_BASE_TYPE?: UNKNOWN_BASE_TYPE, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: AccessToken;  }> {
            const localVarPath = this.basePath + '/operators/login';
            let localVarQueryParameters: any = {};
            let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
                const produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
                } else {
                localVarHeaderParams.Accept = produces.join(',');
                }
            let localVarFormParams: any = {};

            (<any>Object).assign(localVarHeaderParams, options.headers);

            let localVarUseFormData = false;

            let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
                json: true,
                body: ObjectSerializer.serialize(UNKNOWN_BASE_TYPE, "UNKNOWN_BASE_TYPE")
            };

            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
            (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
            localVarRequestOptions.form = localVarFormParams;
            }
            }
            return new Promise<{ response: http.ClientResponse; body: AccessToken;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
            reject(error);
            } else {
                body = ObjectSerializer.deserialize(body, "AccessToken");
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
            resolve({ response: response, body: body });
            } else {
            reject(new HttpError(response, body, response.statusCode));
            }
            }
            });
            });
            });
            }
        }
