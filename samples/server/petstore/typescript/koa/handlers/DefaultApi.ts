/**
 * Monorepo API
 * ## Data Format - ID - UUID v4 - Datetime - UTC, RFC3339, section 5.6 (ISO 8601 extended format). yyyy-MM-ddTHH:mm:ssZ  ## POST, PUT 時に設定するデータについて - 新しく採番が必要な ID はサーバー側で採番しますので POST 時は空欄で大丈夫です - CreatedAt, UpdatedAt, DeletedAt 等の日時もサーバーで設定しますので POST 時, PUT 時の設定不要です mm  ## Credit card information for test - [ja](https://faq.gmo-pg.com/service/detail.aspx?id=1679&a=102&isCrawler=1) - [en](https://www.paypalobjects.com/en_GB/vhelp/paypalmanager_help/credit_card_numbers.htm)  ## Quick Cash UseCase 1. (netive用)AccessToken取得 POST /members/findByMiney 1. (netive用)oneTimeToken取得 POST /members/{memberId}/oneTimeTokens/register 1. (webView用)AccessToken取得 POST /oneTimeTokens/{oneTimeToken}/revoke 1. 会員新規登録 POST /members/register 1. 会員新規登録認証コード入力 POST /members/register/verifySms 1. ログイン会員情報取得 GET /me 1. 規約同意登録 PUT /members/{memberId}/agreements/{agreementType} 1. 会員ログインsms入力 POST /members/login 1. 会員ログイン認証コード入力 POST /members/login/verifySms 1. 会員規約同意状況取得 GET /members/{memberId}/agreements/{agreementType} 1. 会員商品画像登録 POST /members/{memberId}/items 1. 会員商品画像認識結果取得 GET /members/{memberId}/items/{itemId}/negotiations/latest 1. 会員売却登録 POST /members/{memberId}/items/{itemId}/negotiations/established 1. 会員身分証明書画像登録 POST /members/{memberId}/identificationPhotos 1. 会員身分証明書提出 POST /members/{memberId}/identificationStatuses/requestVerify 1. 会員配送先取得 GET /members/{memberId}/address 1. 会員情報登録 PUT /members/{memberId} 1. 会員クレジットカード登録 PUT /members/{memberId}/creditCard 1. オーソリ POST /members/{memberId}/items/{itemId}/negotiations/{negotiationId}/creditAuthorizations/authorize 1. (ベリトランスから) GET(多分) /creditAuthorizations/{creditAuthorizationId}/veritrans/result 1. オーソリ結果取得 GET /members/{memberId}/items/{itemId}/negotiations/{memberItemNegotiationId}/creditAuthorizations/latest 1. 会員銀行口座登録 PUT /members/{memberId}/bankAccount 1. 集荷登録 POST /members/{memberId}/toOfficeDeliveries 1. 集荷状況取得 GET /members/{memberId}/toOfficeDeliveries  ## Operator Console UseCase 1. POST /operators/login 1. GET /members 1. GET /members/{memberId} 1. GET /members/{memberId}/bankAccount 1. GET /memberToOfficeDeliveries 1. GET /memberToOfficeDeliveries/{memberToOfficeDeliveryId} 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest = require('request');
import http = require('http');

/* tslint:disable:no-unused-locals */
    import { AccessToken } from '../';
    import { CreditAuthorization } from '../';
    import { DataUrlImage } from '../';
    import { InlineResponse200 } from '../';
    import { Member } from '../';
    import { MemberAgreement } from '../';
    import { MemberBankAccount } from '../';
    import { MemberBankAccountRequestBody } from '../';
    import { MemberCreditCard } from '../';
    import { MemberIdentificationPhoto } from '../';
    import { MemberIdentificationPhotoRequestBody } from '../';
    import { MemberItem } from '../';
    import { MemberItemNegotiation } from '../';
    import { MemberItemRequestBody } from '../';
    import { MemberOneTimeToken } from '../';
    import { MemberRequestBody } from '../';
    import { MemberToOfficeDelivery } from '../';
    import { MemberWithAddressRequestBody } from '../';
    import { MonorepoMemberAccessToken } from '../';
    import { UNKNOWN_BASE_TYPE } from '../';

import { ObjectSerializer, Authentication, VoidAuth } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'http://localhost:3000';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

    export enum DefaultApiApiKeys {
    }

    export class DefaultApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
    'default': <Authentication>new VoidAuth(),
        }

        constructor(basePath?: string);
        constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
        if (basePath) {
        this.basePath = basePath;
        }
        } else {
        if (basePathOrUsername) {
        this.basePath = basePathOrUsername
        }
        }
        }

        set useQuerystring(value: boolean) {
        this._useQuerystring = value;
        }

        set basePath(basePath: string) {
        this._basePath = basePath;
        }

        get basePath() {
        return this._basePath;
        }

        public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
        }

        public setApiKey(key: DefaultApiApiKeys, value: string) {
        (this.authentications as any)[DefaultApiApiKeys[key]].apiKey = value;
        }

            /**
            * 
                * @param creditAuthorizationId 
                * @param UNKNOWN_BASE_TYPE 
            */
            public async creditAuthorizationsCreditAuthorizationIdVeritransCompletePost (creditAuthorizationId: string, UNKNOWN_BASE_TYPE?: UNKNOWN_BASE_TYPE, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
            const localVarPath = this.basePath + '/creditAuthorizations/{creditAuthorizationId}/veritrans/complete'
                .replace('{' + 'creditAuthorizationId' + '}', encodeURIComponent(String(creditAuthorizationId)));
            let localVarQueryParameters: any = {};
            let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
                const produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
                } else {
                localVarHeaderParams.Accept = produces.join(',');
                }
            let localVarFormParams: any = {};

                    // verify required parameter 'creditAuthorizationId' is not null or undefined
                    if (creditAuthorizationId === null || creditAuthorizationId === undefined) {
                    throw new Error('Required parameter creditAuthorizationId was null or undefined when calling creditAuthorizationsCreditAuthorizationIdVeritransCompletePost.');
                    }

            (<any>Object).assign(localVarHeaderParams, options.headers);

            let localVarUseFormData = false;

            let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
                json: true,
                body: ObjectSerializer.serialize(UNKNOWN_BASE_TYPE, "UNKNOWN_BASE_TYPE")
            };

            let authenticationPromise = Promise.resolve();
                authenticationPromise = authenticationPromise.then(() => this.authentications.VeritransBasicAuth.applyToRequest(localVarRequestOptions));

            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
            (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
            localVarRequestOptions.form = localVarFormParams;
            }
            }
            return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
            reject(error);
            } else {
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
            resolve({ response: response, body: body });
            } else {
            reject(new HttpError(response, body, response.statusCode));
            }
            }
            });
            });
            });
            }
            /**
            * 
                * @param creditAuthorizationId 
                * @param UNKNOWN_BASE_TYPE 
            */
            public async creditAuthorizationsCreditAuthorizationIdVeritransResultPost (creditAuthorizationId: string, UNKNOWN_BASE_TYPE?: UNKNOWN_BASE_TYPE, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
            const localVarPath = this.basePath + '/creditAuthorizations/{creditAuthorizationId}/veritrans/result'
                .replace('{' + 'creditAuthorizationId' + '}', encodeURIComponent(String(creditAuthorizationId)));
            let localVarQueryParameters: any = {};
            let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
                const produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
                } else {
                localVarHeaderParams.Accept = produces.join(',');
                }
            let localVarFormParams: any = {};

                    // verify required parameter 'creditAuthorizationId' is not null or undefined
                    if (creditAuthorizationId === null || creditAuthorizationId === undefined) {
                    throw new Error('Required parameter creditAuthorizationId was null or undefined when calling creditAuthorizationsCreditAuthorizationIdVeritransResultPost.');
                    }

            (<any>Object).assign(localVarHeaderParams, options.headers);

            let localVarUseFormData = false;

            let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
                json: true,
                body: ObjectSerializer.serialize(UNKNOWN_BASE_TYPE, "UNKNOWN_BASE_TYPE")
            };

            let authenticationPromise = Promise.resolve();
                authenticationPromise = authenticationPromise.then(() => this.authentications.VeritransBasicAuth.applyToRequest(localVarRequestOptions));

            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
            (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
            localVarRequestOptions.form = localVarFormParams;
            }
            }
            return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
            reject(error);
            } else {
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
            resolve({ response: response, body: body });
            } else {
            reject(new HttpError(response, body, response.statusCode));
            }
            }
            });
            });
            });
            }
            /**
            * 
            */
            public async healthCheckGet (options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: string;  }> {
            const localVarPath = this.basePath + '/healthCheck';
            let localVarQueryParameters: any = {};
            let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
                const produces = ['text/plain', 'application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
                } else {
                localVarHeaderParams.Accept = produces.join(',');
                }
            let localVarFormParams: any = {};

            (<any>Object).assign(localVarHeaderParams, options.headers);

            let localVarUseFormData = false;

            let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
                json: true,
            };

            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
            (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
            localVarRequestOptions.form = localVarFormParams;
            }
            }
            return new Promise<{ response: http.ClientResponse; body: string;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
            reject(error);
            } else {
                body = ObjectSerializer.deserialize(body, "string");
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
            resolve({ response: response, body: body });
            } else {
            reject(new HttpError(response, body, response.statusCode));
            }
            }
            });
            });
            });
            }
            /**
            * 
                * @param memberId 
                * @param identificationId 
                * @param extension 
            */
            public async imagesMembersMemberIdIdentificationsIdentificationIdExtensionGet (memberId: string, identificationId: string, extension: 'png' | 'jpg' | 'jpeg', options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: DataUrlImage;  }> {
            const localVarPath = this.basePath + '/images/members/{memberId}/identifications/{identificationId}.{extension}'
                .replace('{' + 'memberId' + '}', encodeURIComponent(String(memberId)))
                .replace('{' + 'identificationId' + '}', encodeURIComponent(String(identificationId)))
                .replace('{' + 'extension' + '}', encodeURIComponent(String(extension)));
            let localVarQueryParameters: any = {};
            let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
                const produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
                } else {
                localVarHeaderParams.Accept = produces.join(',');
                }
            let localVarFormParams: any = {};

                    // verify required parameter 'memberId' is not null or undefined
                    if (memberId === null || memberId === undefined) {
                    throw new Error('Required parameter memberId was null or undefined when calling imagesMembersMemberIdIdentificationsIdentificationIdExtensionGet.');
                    }

                    // verify required parameter 'identificationId' is not null or undefined
                    if (identificationId === null || identificationId === undefined) {
                    throw new Error('Required parameter identificationId was null or undefined when calling imagesMembersMemberIdIdentificationsIdentificationIdExtensionGet.');
                    }

                    // verify required parameter 'extension' is not null or undefined
                    if (extension === null || extension === undefined) {
                    throw new Error('Required parameter extension was null or undefined when calling imagesMembersMemberIdIdentificationsIdentificationIdExtensionGet.');
                    }

            (<any>Object).assign(localVarHeaderParams, options.headers);

            let localVarUseFormData = false;

            let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
                json: true,
            };

            let authenticationPromise = Promise.resolve();
                authenticationPromise = authenticationPromise.then(() => this.authentications.MemberBearerAuth.applyToRequest(localVarRequestOptions));

            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
            (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
            localVarRequestOptions.form = localVarFormParams;
            }
            }
            return new Promise<{ response: http.ClientResponse; body: DataUrlImage;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
            reject(error);
            } else {
                body = ObjectSerializer.deserialize(body, "DataUrlImage");
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
            resolve({ response: response, body: body });
            } else {
            reject(new HttpError(response, body, response.statusCode));
            }
            }
            });
            });
            });
            }
            /**
            * 
                * @param memberId 
                * @param itemId 
                * @param itemPhotoId 
                * @param extension 
            */
            public async imagesMembersMemberIdItemsItemIdItemPhotoIdExtensionGet (memberId: string, itemId: string, itemPhotoId: string, extension: 'png' | 'jpg' | 'jpeg', options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: DataUrlImage;  }> {
            const localVarPath = this.basePath + '/images/members/{memberId}/items/{itemId}/{itemPhotoId}.{extension}'
                .replace('{' + 'memberId' + '}', encodeURIComponent(String(memberId)))
                .replace('{' + 'itemId' + '}', encodeURIComponent(String(itemId)))
                .replace('{' + 'itemPhotoId' + '}', encodeURIComponent(String(itemPhotoId)))
                .replace('{' + 'extension' + '}', encodeURIComponent(String(extension)));
            let localVarQueryParameters: any = {};
            let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
                const produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
                } else {
                localVarHeaderParams.Accept = produces.join(',');
                }
            let localVarFormParams: any = {};

                    // verify required parameter 'memberId' is not null or undefined
                    if (memberId === null || memberId === undefined) {
                    throw new Error('Required parameter memberId was null or undefined when calling imagesMembersMemberIdItemsItemIdItemPhotoIdExtensionGet.');
                    }

                    // verify required parameter 'itemId' is not null or undefined
                    if (itemId === null || itemId === undefined) {
                    throw new Error('Required parameter itemId was null or undefined when calling imagesMembersMemberIdItemsItemIdItemPhotoIdExtensionGet.');
                    }

                    // verify required parameter 'itemPhotoId' is not null or undefined
                    if (itemPhotoId === null || itemPhotoId === undefined) {
                    throw new Error('Required parameter itemPhotoId was null or undefined when calling imagesMembersMemberIdItemsItemIdItemPhotoIdExtensionGet.');
                    }

                    // verify required parameter 'extension' is not null or undefined
                    if (extension === null || extension === undefined) {
                    throw new Error('Required parameter extension was null or undefined when calling imagesMembersMemberIdItemsItemIdItemPhotoIdExtensionGet.');
                    }

            (<any>Object).assign(localVarHeaderParams, options.headers);

            let localVarUseFormData = false;

            let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
                json: true,
            };

            let authenticationPromise = Promise.resolve();
                authenticationPromise = authenticationPromise.then(() => this.authentications.MemberBearerAuth.applyToRequest(localVarRequestOptions));

            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
            (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
            localVarRequestOptions.form = localVarFormParams;
            }
            }
            return new Promise<{ response: http.ClientResponse; body: DataUrlImage;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
            reject(error);
            } else {
                body = ObjectSerializer.deserialize(body, "DataUrlImage");
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
            resolve({ response: response, body: body });
            } else {
            reject(new HttpError(response, body, response.statusCode));
            }
            }
            });
            });
            });
            }
            /**
            * 
            */
            public async meGet (options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Member;  }> {
            const localVarPath = this.basePath + '/me';
            let localVarQueryParameters: any = {};
            let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
                const produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
                } else {
                localVarHeaderParams.Accept = produces.join(',');
                }
            let localVarFormParams: any = {};

            (<any>Object).assign(localVarHeaderParams, options.headers);

            let localVarUseFormData = false;

            let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
                json: true,
            };

            let authenticationPromise = Promise.resolve();
                authenticationPromise = authenticationPromise.then(() => this.authentications.MemberBearerAuth.applyToRequest(localVarRequestOptions));

            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
            (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
            localVarRequestOptions.form = localVarFormParams;
            }
            }
            return new Promise<{ response: http.ClientResponse; body: Member;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
            reject(error);
            } else {
                body = ObjectSerializer.deserialize(body, "Member");
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
            resolve({ response: response, body: body });
            } else {
            reject(new HttpError(response, body, response.statusCode));
            }
            }
            });
            });
            });
            }
            /**
            * 
            */
            public async memberToOfficeDeliveriesGet (options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<MemberToOfficeDelivery>;  }> {
            const localVarPath = this.basePath + '/memberToOfficeDeliveries';
            let localVarQueryParameters: any = {};
            let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
                const produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
                } else {
                localVarHeaderParams.Accept = produces.join(',');
                }
            let localVarFormParams: any = {};

            (<any>Object).assign(localVarHeaderParams, options.headers);

            let localVarUseFormData = false;

            let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
                json: true,
            };

            let authenticationPromise = Promise.resolve();
                authenticationPromise = authenticationPromise.then(() => this.authentications.OperatorBearerAuth.applyToRequest(localVarRequestOptions));

            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
            (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
            localVarRequestOptions.form = localVarFormParams;
            }
            }
            return new Promise<{ response: http.ClientResponse; body: Array<MemberToOfficeDelivery>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
            reject(error);
            } else {
                body = ObjectSerializer.deserialize(body, "Array<MemberToOfficeDelivery>");
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
            resolve({ response: response, body: body });
            } else {
            reject(new HttpError(response, body, response.statusCode));
            }
            }
            });
            });
            });
            }
            /**
            * 
                * @param memberToOfficeDeliveryId 
            */
            public async memberToOfficeDeliveriesMemberToOfficeDeliveryIdGet (memberToOfficeDeliveryId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: MemberToOfficeDelivery;  }> {
            const localVarPath = this.basePath + '/memberToOfficeDeliveries/{memberToOfficeDeliveryId}'
                .replace('{' + 'memberToOfficeDeliveryId' + '}', encodeURIComponent(String(memberToOfficeDeliveryId)));
            let localVarQueryParameters: any = {};
            let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
                const produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
                } else {
                localVarHeaderParams.Accept = produces.join(',');
                }
            let localVarFormParams: any = {};

                    // verify required parameter 'memberToOfficeDeliveryId' is not null or undefined
                    if (memberToOfficeDeliveryId === null || memberToOfficeDeliveryId === undefined) {
                    throw new Error('Required parameter memberToOfficeDeliveryId was null or undefined when calling memberToOfficeDeliveriesMemberToOfficeDeliveryIdGet.');
                    }

            (<any>Object).assign(localVarHeaderParams, options.headers);

            let localVarUseFormData = false;

            let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
                json: true,
            };

            let authenticationPromise = Promise.resolve();
                authenticationPromise = authenticationPromise.then(() => this.authentications.OperatorBearerAuth.applyToRequest(localVarRequestOptions));

            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
            (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
            localVarRequestOptions.form = localVarFormParams;
            }
            }
            return new Promise<{ response: http.ClientResponse; body: MemberToOfficeDelivery;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
            reject(error);
            } else {
                body = ObjectSerializer.deserialize(body, "MemberToOfficeDelivery");
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
            resolve({ response: response, body: body });
            } else {
            reject(new HttpError(response, body, response.statusCode));
            }
            }
            });
            });
            });
            }
            /**
            * 
                * @param UNKNOWN_BASE_TYPE 
            */
            public async membersFindByMineyPost (UNKNOWN_BASE_TYPE?: UNKNOWN_BASE_TYPE, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: MonorepoMemberAccessToken;  }> {
            const localVarPath = this.basePath + '/members/findByMiney';
            let localVarQueryParameters: any = {};
            let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
                const produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
                } else {
                localVarHeaderParams.Accept = produces.join(',');
                }
            let localVarFormParams: any = {};

            (<any>Object).assign(localVarHeaderParams, options.headers);

            let localVarUseFormData = false;

            let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
                json: true,
                body: ObjectSerializer.serialize(UNKNOWN_BASE_TYPE, "UNKNOWN_BASE_TYPE")
            };

            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
            (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
            localVarRequestOptions.form = localVarFormParams;
            }
            }
            return new Promise<{ response: http.ClientResponse; body: MonorepoMemberAccessToken;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
            reject(error);
            } else {
                body = ObjectSerializer.deserialize(body, "MonorepoMemberAccessToken");
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
            resolve({ response: response, body: body });
            } else {
            reject(new HttpError(response, body, response.statusCode));
            }
            }
            });
            });
            });
            }
            /**
            * 
            */
            public async membersGet (options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<Member>;  }> {
            const localVarPath = this.basePath + '/members';
            let localVarQueryParameters: any = {};
            let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
                const produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
                } else {
                localVarHeaderParams.Accept = produces.join(',');
                }
            let localVarFormParams: any = {};

            (<any>Object).assign(localVarHeaderParams, options.headers);

            let localVarUseFormData = false;

            let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
                json: true,
            };

            let authenticationPromise = Promise.resolve();
                authenticationPromise = authenticationPromise.then(() => this.authentications.OperatorBearerAuth.applyToRequest(localVarRequestOptions));

            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
            (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
            localVarRequestOptions.form = localVarFormParams;
            }
            }
            return new Promise<{ response: http.ClientResponse; body: Array<Member>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
            reject(error);
            } else {
                body = ObjectSerializer.deserialize(body, "Array<Member>");
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
            resolve({ response: response, body: body });
            } else {
            reject(new HttpError(response, body, response.statusCode));
            }
            }
            });
            });
            });
            }
            /**
            * ユーザー未登録時 200 
                * @param UNKNOWN_BASE_TYPE 
            */
            public async membersLoginPost (UNKNOWN_BASE_TYPE?: UNKNOWN_BASE_TYPE, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
            const localVarPath = this.basePath + '/members/login';
            let localVarQueryParameters: any = {};
            let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
                const produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
                } else {
                localVarHeaderParams.Accept = produces.join(',');
                }
            let localVarFormParams: any = {};

            (<any>Object).assign(localVarHeaderParams, options.headers);

            let localVarUseFormData = false;

            let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
                json: true,
                body: ObjectSerializer.serialize(UNKNOWN_BASE_TYPE, "UNKNOWN_BASE_TYPE")
            };

            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
            (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
            localVarRequestOptions.form = localVarFormParams;
            }
            }
            return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
            reject(error);
            } else {
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
            resolve({ response: response, body: body });
            } else {
            reject(new HttpError(response, body, response.statusCode));
            }
            }
            });
            });
            });
            }
            /**
            * 
                * @param UNKNOWN_BASE_TYPE 
            */
            public async membersLoginVerifySmsPost (UNKNOWN_BASE_TYPE?: UNKNOWN_BASE_TYPE, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: AccessToken;  }> {
            const localVarPath = this.basePath + '/members/login/verifySms';
            let localVarQueryParameters: any = {};
            let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
                const produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
                } else {
                localVarHeaderParams.Accept = produces.join(',');
                }
            let localVarFormParams: any = {};

            (<any>Object).assign(localVarHeaderParams, options.headers);

            let localVarUseFormData = false;

            let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
                json: true,
                body: ObjectSerializer.serialize(UNKNOWN_BASE_TYPE, "UNKNOWN_BASE_TYPE")
            };

            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
            (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
            localVarRequestOptions.form = localVarFormParams;
            }
            }
            return new Promise<{ response: http.ClientResponse; body: AccessToken;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
            reject(error);
            } else {
                body = ObjectSerializer.deserialize(body, "AccessToken");
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
            resolve({ response: response, body: body });
            } else {
            reject(new HttpError(response, body, response.statusCode));
            }
            }
            });
            });
            });
            }
            /**
            * 
                * @param memberId 
                * @param agreementType 
            */
            public async membersMemberIdAgreementsAgreementTypeGet (memberId: string, agreementType: 'termsOfService-v20191202' | 'privacyPolicy-v20191202', options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: MemberAgreement;  }> {
            const localVarPath = this.basePath + '/members/{memberId}/agreements/{agreementType}'
                .replace('{' + 'memberId' + '}', encodeURIComponent(String(memberId)))
                .replace('{' + 'agreementType' + '}', encodeURIComponent(String(agreementType)));
            let localVarQueryParameters: any = {};
            let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
                const produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
                } else {
                localVarHeaderParams.Accept = produces.join(',');
                }
            let localVarFormParams: any = {};

                    // verify required parameter 'memberId' is not null or undefined
                    if (memberId === null || memberId === undefined) {
                    throw new Error('Required parameter memberId was null or undefined when calling membersMemberIdAgreementsAgreementTypeGet.');
                    }

                    // verify required parameter 'agreementType' is not null or undefined
                    if (agreementType === null || agreementType === undefined) {
                    throw new Error('Required parameter agreementType was null or undefined when calling membersMemberIdAgreementsAgreementTypeGet.');
                    }

            (<any>Object).assign(localVarHeaderParams, options.headers);

            let localVarUseFormData = false;

            let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
                json: true,
            };

            let authenticationPromise = Promise.resolve();
                authenticationPromise = authenticationPromise.then(() => this.authentications.MemberBearerAuth.applyToRequest(localVarRequestOptions));

            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
            (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
            localVarRequestOptions.form = localVarFormParams;
            }
            }
            return new Promise<{ response: http.ClientResponse; body: MemberAgreement;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
            reject(error);
            } else {
                body = ObjectSerializer.deserialize(body, "MemberAgreement");
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
            resolve({ response: response, body: body });
            } else {
            reject(new HttpError(response, body, response.statusCode));
            }
            }
            });
            });
            });
            }
            /**
            * 
                * @param memberId 
                * @param agreementType 
            */
            public async membersMemberIdAgreementsAgreementTypePut (memberId: string, agreementType: 'termsOfService-v20191202' | 'privacyPolicy-v20191202', options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
            const localVarPath = this.basePath + '/members/{memberId}/agreements/{agreementType}'
                .replace('{' + 'memberId' + '}', encodeURIComponent(String(memberId)))
                .replace('{' + 'agreementType' + '}', encodeURIComponent(String(agreementType)));
            let localVarQueryParameters: any = {};
            let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
                const produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
                } else {
                localVarHeaderParams.Accept = produces.join(',');
                }
            let localVarFormParams: any = {};

                    // verify required parameter 'memberId' is not null or undefined
                    if (memberId === null || memberId === undefined) {
                    throw new Error('Required parameter memberId was null or undefined when calling membersMemberIdAgreementsAgreementTypePut.');
                    }

                    // verify required parameter 'agreementType' is not null or undefined
                    if (agreementType === null || agreementType === undefined) {
                    throw new Error('Required parameter agreementType was null or undefined when calling membersMemberIdAgreementsAgreementTypePut.');
                    }

            (<any>Object).assign(localVarHeaderParams, options.headers);

            let localVarUseFormData = false;

            let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
                json: true,
            };

            let authenticationPromise = Promise.resolve();
                authenticationPromise = authenticationPromise.then(() => this.authentications.MemberBearerAuth.applyToRequest(localVarRequestOptions));

            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
            (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
            localVarRequestOptions.form = localVarFormParams;
            }
            }
            return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
            reject(error);
            } else {
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
            resolve({ response: response, body: body });
            } else {
            reject(new HttpError(response, body, response.statusCode));
            }
            }
            });
            });
            });
            }
            /**
            * 
                * @param memberId 
            */
            public async membersMemberIdBankAccountGet (memberId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: MemberBankAccount;  }> {
            const localVarPath = this.basePath + '/members/{memberId}/bankAccount'
                .replace('{' + 'memberId' + '}', encodeURIComponent(String(memberId)));
            let localVarQueryParameters: any = {};
            let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
                const produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
                } else {
                localVarHeaderParams.Accept = produces.join(',');
                }
            let localVarFormParams: any = {};

                    // verify required parameter 'memberId' is not null or undefined
                    if (memberId === null || memberId === undefined) {
                    throw new Error('Required parameter memberId was null or undefined when calling membersMemberIdBankAccountGet.');
                    }

            (<any>Object).assign(localVarHeaderParams, options.headers);

            let localVarUseFormData = false;

            let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
                json: true,
            };

            let authenticationPromise = Promise.resolve();
                authenticationPromise = authenticationPromise.then(() => this.authentications.MemberBearerAuth.applyToRequest(localVarRequestOptions));

            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
            (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
            localVarRequestOptions.form = localVarFormParams;
            }
            }
            return new Promise<{ response: http.ClientResponse; body: MemberBankAccount;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
            reject(error);
            } else {
                body = ObjectSerializer.deserialize(body, "MemberBankAccount");
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
            resolve({ response: response, body: body });
            } else {
            reject(new HttpError(response, body, response.statusCode));
            }
            }
            });
            });
            });
            }
            /**
            * 
                * @param memberId 
                * @param memberBankAccountRequestBody 
            */
            public async membersMemberIdBankAccountPut (memberId: string, memberBankAccountRequestBody?: MemberBankAccountRequestBody, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
            const localVarPath = this.basePath + '/members/{memberId}/bankAccount'
                .replace('{' + 'memberId' + '}', encodeURIComponent(String(memberId)));
            let localVarQueryParameters: any = {};
            let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
                const produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
                } else {
                localVarHeaderParams.Accept = produces.join(',');
                }
            let localVarFormParams: any = {};

                    // verify required parameter 'memberId' is not null or undefined
                    if (memberId === null || memberId === undefined) {
                    throw new Error('Required parameter memberId was null or undefined when calling membersMemberIdBankAccountPut.');
                    }

            (<any>Object).assign(localVarHeaderParams, options.headers);

            let localVarUseFormData = false;

            let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
                json: true,
                body: ObjectSerializer.serialize(memberBankAccountRequestBody, "MemberBankAccountRequestBody")
            };

            let authenticationPromise = Promise.resolve();
                authenticationPromise = authenticationPromise.then(() => this.authentications.MemberBearerAuth.applyToRequest(localVarRequestOptions));

                authenticationPromise = authenticationPromise.then(() => this.authentications.OperatorBearerAuth.applyToRequest(localVarRequestOptions));

            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
            (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
            localVarRequestOptions.form = localVarFormParams;
            }
            }
            return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
            reject(error);
            } else {
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
            resolve({ response: response, body: body });
            } else {
            reject(new HttpError(response, body, response.statusCode));
            }
            }
            });
            });
            });
            }
            /**
            * 
                * @param memberId 
            */
            public async membersMemberIdCreditCardGet (memberId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: MemberCreditCard;  }> {
            const localVarPath = this.basePath + '/members/{memberId}/creditCard'
                .replace('{' + 'memberId' + '}', encodeURIComponent(String(memberId)));
            let localVarQueryParameters: any = {};
            let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
                const produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
                } else {
                localVarHeaderParams.Accept = produces.join(',');
                }
            let localVarFormParams: any = {};

                    // verify required parameter 'memberId' is not null or undefined
                    if (memberId === null || memberId === undefined) {
                    throw new Error('Required parameter memberId was null or undefined when calling membersMemberIdCreditCardGet.');
                    }

            (<any>Object).assign(localVarHeaderParams, options.headers);

            let localVarUseFormData = false;

            let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
                json: true,
            };

            let authenticationPromise = Promise.resolve();
                authenticationPromise = authenticationPromise.then(() => this.authentications.MemberBearerAuth.applyToRequest(localVarRequestOptions));

            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
            (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
            localVarRequestOptions.form = localVarFormParams;
            }
            }
            return new Promise<{ response: http.ClientResponse; body: MemberCreditCard;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
            reject(error);
            } else {
                body = ObjectSerializer.deserialize(body, "MemberCreditCard");
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
            resolve({ response: response, body: body });
            } else {
            reject(new HttpError(response, body, response.statusCode));
            }
            }
            });
            });
            });
            }
            /**
            * 
                * @param memberId 
                * @param memberCreditCard 
            */
            public async membersMemberIdCreditCardPut (memberId: string, memberCreditCard?: MemberCreditCard, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
            const localVarPath = this.basePath + '/members/{memberId}/creditCard'
                .replace('{' + 'memberId' + '}', encodeURIComponent(String(memberId)));
            let localVarQueryParameters: any = {};
            let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
                const produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
                } else {
                localVarHeaderParams.Accept = produces.join(',');
                }
            let localVarFormParams: any = {};

                    // verify required parameter 'memberId' is not null or undefined
                    if (memberId === null || memberId === undefined) {
                    throw new Error('Required parameter memberId was null or undefined when calling membersMemberIdCreditCardPut.');
                    }

            (<any>Object).assign(localVarHeaderParams, options.headers);

            let localVarUseFormData = false;

            let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
                json: true,
                body: ObjectSerializer.serialize(memberCreditCard, "MemberCreditCard")
            };

            let authenticationPromise = Promise.resolve();
                authenticationPromise = authenticationPromise.then(() => this.authentications.MemberBearerAuth.applyToRequest(localVarRequestOptions));

            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
            (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
            localVarRequestOptions.form = localVarFormParams;
            }
            }
            return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
            reject(error);
            } else {
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
            resolve({ response: response, body: body });
            } else {
            reject(new HttpError(response, body, response.statusCode));
            }
            }
            });
            });
            });
            }
            /**
            * 
                * @param memberId 
            */
            public async membersMemberIdGet (memberId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Member;  }> {
            const localVarPath = this.basePath + '/members/{memberId}'
                .replace('{' + 'memberId' + '}', encodeURIComponent(String(memberId)));
            let localVarQueryParameters: any = {};
            let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
                const produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
                } else {
                localVarHeaderParams.Accept = produces.join(',');
                }
            let localVarFormParams: any = {};

                    // verify required parameter 'memberId' is not null or undefined
                    if (memberId === null || memberId === undefined) {
                    throw new Error('Required parameter memberId was null or undefined when calling membersMemberIdGet.');
                    }

            (<any>Object).assign(localVarHeaderParams, options.headers);

            let localVarUseFormData = false;

            let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
                json: true,
            };

            let authenticationPromise = Promise.resolve();
                authenticationPromise = authenticationPromise.then(() => this.authentications.MemberBearerAuth.applyToRequest(localVarRequestOptions));

                authenticationPromise = authenticationPromise.then(() => this.authentications.OperatorBearerAuth.applyToRequest(localVarRequestOptions));

            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
            (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
            localVarRequestOptions.form = localVarFormParams;
            }
            }
            return new Promise<{ response: http.ClientResponse; body: Member;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
            reject(error);
            } else {
                body = ObjectSerializer.deserialize(body, "Member");
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
            resolve({ response: response, body: body });
            } else {
            reject(new HttpError(response, body, response.statusCode));
            }
            }
            });
            });
            });
            }
            /**
            * 
                * @param memberId 
            */
            public async membersMemberIdIdentificationPhotosGet (memberId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<MemberIdentificationPhoto>;  }> {
            const localVarPath = this.basePath + '/members/{memberId}/identificationPhotos'
                .replace('{' + 'memberId' + '}', encodeURIComponent(String(memberId)));
            let localVarQueryParameters: any = {};
            let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
                const produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
                } else {
                localVarHeaderParams.Accept = produces.join(',');
                }
            let localVarFormParams: any = {};

                    // verify required parameter 'memberId' is not null or undefined
                    if (memberId === null || memberId === undefined) {
                    throw new Error('Required parameter memberId was null or undefined when calling membersMemberIdIdentificationPhotosGet.');
                    }

            (<any>Object).assign(localVarHeaderParams, options.headers);

            let localVarUseFormData = false;

            let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
                json: true,
            };

            let authenticationPromise = Promise.resolve();
                authenticationPromise = authenticationPromise.then(() => this.authentications.MemberBearerAuth.applyToRequest(localVarRequestOptions));

            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
            (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
            localVarRequestOptions.form = localVarFormParams;
            }
            }
            return new Promise<{ response: http.ClientResponse; body: Array<MemberIdentificationPhoto>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
            reject(error);
            } else {
                body = ObjectSerializer.deserialize(body, "Array<MemberIdentificationPhoto>");
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
            resolve({ response: response, body: body });
            } else {
            reject(new HttpError(response, body, response.statusCode));
            }
            }
            });
            });
            });
            }
            /**
            * 
                * @param memberId 
                * @param UNKNOWN_BASE_TYPE 
            */
            public async membersMemberIdIdentificationPhotosPost (memberId: string, UNKNOWN_BASE_TYPE?: UNKNOWN_BASE_TYPE, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: MemberIdentificationPhoto;  }> {
            const localVarPath = this.basePath + '/members/{memberId}/identificationPhotos'
                .replace('{' + 'memberId' + '}', encodeURIComponent(String(memberId)));
            let localVarQueryParameters: any = {};
            let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
                const produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
                } else {
                localVarHeaderParams.Accept = produces.join(',');
                }
            let localVarFormParams: any = {};

                    // verify required parameter 'memberId' is not null or undefined
                    if (memberId === null || memberId === undefined) {
                    throw new Error('Required parameter memberId was null or undefined when calling membersMemberIdIdentificationPhotosPost.');
                    }

            (<any>Object).assign(localVarHeaderParams, options.headers);

            let localVarUseFormData = false;

            let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
                json: true,
                body: ObjectSerializer.serialize(UNKNOWN_BASE_TYPE, "UNKNOWN_BASE_TYPE")
            };

            let authenticationPromise = Promise.resolve();
                authenticationPromise = authenticationPromise.then(() => this.authentications.MemberBearerAuth.applyToRequest(localVarRequestOptions));

            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
            (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
            localVarRequestOptions.form = localVarFormParams;
            }
            }
            return new Promise<{ response: http.ClientResponse; body: MemberIdentificationPhoto;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
            reject(error);
            } else {
                body = ObjectSerializer.deserialize(body, "MemberIdentificationPhoto");
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
            resolve({ response: response, body: body });
            } else {
            reject(new HttpError(response, body, response.statusCode));
            }
            }
            });
            });
            });
            }
            /**
            * 
                * @param memberId 
            */
            public async membersMemberIdIdentificationStatusesRequestVerifyPost (memberId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
            const localVarPath = this.basePath + '/members/{memberId}/identificationStatuses/requestVerify'
                .replace('{' + 'memberId' + '}', encodeURIComponent(String(memberId)));
            let localVarQueryParameters: any = {};
            let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
                const produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
                } else {
                localVarHeaderParams.Accept = produces.join(',');
                }
            let localVarFormParams: any = {};

                    // verify required parameter 'memberId' is not null or undefined
                    if (memberId === null || memberId === undefined) {
                    throw new Error('Required parameter memberId was null or undefined when calling membersMemberIdIdentificationStatusesRequestVerifyPost.');
                    }

            (<any>Object).assign(localVarHeaderParams, options.headers);

            let localVarUseFormData = false;

            let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
                json: true,
            };

            let authenticationPromise = Promise.resolve();
                authenticationPromise = authenticationPromise.then(() => this.authentications.MemberBearerAuth.applyToRequest(localVarRequestOptions));

            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
            (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
            localVarRequestOptions.form = localVarFormParams;
            }
            }
            return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
            reject(error);
            } else {
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
            resolve({ response: response, body: body });
            } else {
            reject(new HttpError(response, body, response.statusCode));
            }
            }
            });
            });
            });
            }
            /**
            * 
                * @param memberId 
                * @param itemId 
            */
            public async membersMemberIdItemsItemIdNegotiationsLatestGet (memberId: string, itemId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: MemberItemNegotiation;  }> {
            const localVarPath = this.basePath + '/members/{memberId}/items/{itemId}/negotiations/latest'
                .replace('{' + 'memberId' + '}', encodeURIComponent(String(memberId)))
                .replace('{' + 'itemId' + '}', encodeURIComponent(String(itemId)));
            let localVarQueryParameters: any = {};
            let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
                const produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
                } else {
                localVarHeaderParams.Accept = produces.join(',');
                }
            let localVarFormParams: any = {};

                    // verify required parameter 'memberId' is not null or undefined
                    if (memberId === null || memberId === undefined) {
                    throw new Error('Required parameter memberId was null or undefined when calling membersMemberIdItemsItemIdNegotiationsLatestGet.');
                    }

                    // verify required parameter 'itemId' is not null or undefined
                    if (itemId === null || itemId === undefined) {
                    throw new Error('Required parameter itemId was null or undefined when calling membersMemberIdItemsItemIdNegotiationsLatestGet.');
                    }

            (<any>Object).assign(localVarHeaderParams, options.headers);

            let localVarUseFormData = false;

            let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
                json: true,
            };

            let authenticationPromise = Promise.resolve();
                authenticationPromise = authenticationPromise.then(() => this.authentications.MemberBearerAuth.applyToRequest(localVarRequestOptions));

            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
            (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
            localVarRequestOptions.form = localVarFormParams;
            }
            }
            return new Promise<{ response: http.ClientResponse; body: MemberItemNegotiation;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
            reject(error);
            } else {
                body = ObjectSerializer.deserialize(body, "MemberItemNegotiation");
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
            resolve({ response: response, body: body });
            } else {
            reject(new HttpError(response, body, response.statusCode));
            }
            }
            });
            });
            });
            }
            /**
            * [ベリトランス 3D Secure Payment シーケンス](https://www.veritrans.co.jp/developer/air/en/direct_mpi.html)の [MPI Payment request()](https://air.veritrans.co.jp/vtdirect/v1/mpi_charges) を実行するAPIです  ベリトランスがhtml生成に使うんであろうクライアントの情報も要求されているのでパラメーターにて受け取らせてください。  各項目は[/mpi_charges](https://www.veritrans.co.jp/developer/air/en/direct_api.html#mpicharge)の呼び出し時に使うものを指定していただく想定です :bow:  ## backend 実装者向け情報 ### table: creditAuthorizationVeritrans (案) - id: string - memberId: string - negotiationId: string - grossAmount: number - mpiStatus: string - cardStatus: string - paymentTransactionId: string - frontendCompleteUrl: string - createdAt: datetime - updatedAt: datetime   ### Veritrans #### Document - [内部で呼び出すベリトランスのAPI](https://www.veritrans.co.jp/developer/air/en/direct_api.html#mpicharge) #### Fields (一瞬考えたのでメモです) ##### Header - secret_key: Config 経由の環境変数 ##### Request Body - order_id: creditAuthorizationId - token_id: browser から受け取る - gross_amount:   - (仮実装)negotiation.proposedPrice * 1.1 + 1000   - 小数点切り上げ   - [計算式から変わる可能性あり、biz確認中](https://github.com/sou-project/quick-cash/issues/140) - service_option_type: mpi-complete - push_uri: ${BASE_URL}/creditAuthorizations/{creditAuthorizationId}/veritrans/result - redirection_uri: ${BASE_URL}/creditAuthorizations/{creditAuthorizationId}/veritrans/complete  パラメーターで受け取るredirectionUri - http_user_agent: フロントからのリクエスト時に受け取るuaで良い気がする - http_accept: \'text/html, application/xhtml+xml, *_/_*\' 固定で良い気がする(api へのrequest は application/json のみだった) - with_capture: false - test_mode: config 経由の環境変数で良いような - memo1: (いつか管理画面の urlでも入れたら便利ですかね) 
                * @param memberId 
                * @param itemId 
                * @param memberItemNegotiationId 
                * @param userAgent 
                * @param UNKNOWN_BASE_TYPE 
            */
            public async membersMemberIdItemsItemIdNegotiationsMemberItemNegotiationIdCreditAuthorizationsAuthorizePost (memberId: string, itemId: string, memberItemNegotiationId: string, userAgent: string, UNKNOWN_BASE_TYPE?: UNKNOWN_BASE_TYPE, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: InlineResponse200;  }> {
            const localVarPath = this.basePath + '/members/{memberId}/items/{itemId}/negotiations/{memberItemNegotiationId}/creditAuthorizations/authorize'
                .replace('{' + 'memberId' + '}', encodeURIComponent(String(memberId)))
                .replace('{' + 'itemId' + '}', encodeURIComponent(String(itemId)))
                .replace('{' + 'memberItemNegotiationId' + '}', encodeURIComponent(String(memberItemNegotiationId)));
            let localVarQueryParameters: any = {};
            let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
                const produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
                } else {
                localVarHeaderParams.Accept = produces.join(',');
                }
            let localVarFormParams: any = {};

                    // verify required parameter 'memberId' is not null or undefined
                    if (memberId === null || memberId === undefined) {
                    throw new Error('Required parameter memberId was null or undefined when calling membersMemberIdItemsItemIdNegotiationsMemberItemNegotiationIdCreditAuthorizationsAuthorizePost.');
                    }

                    // verify required parameter 'itemId' is not null or undefined
                    if (itemId === null || itemId === undefined) {
                    throw new Error('Required parameter itemId was null or undefined when calling membersMemberIdItemsItemIdNegotiationsMemberItemNegotiationIdCreditAuthorizationsAuthorizePost.');
                    }

                    // verify required parameter 'memberItemNegotiationId' is not null or undefined
                    if (memberItemNegotiationId === null || memberItemNegotiationId === undefined) {
                    throw new Error('Required parameter memberItemNegotiationId was null or undefined when calling membersMemberIdItemsItemIdNegotiationsMemberItemNegotiationIdCreditAuthorizationsAuthorizePost.');
                    }

                    // verify required parameter 'userAgent' is not null or undefined
                    if (userAgent === null || userAgent === undefined) {
                    throw new Error('Required parameter userAgent was null or undefined when calling membersMemberIdItemsItemIdNegotiationsMemberItemNegotiationIdCreditAuthorizationsAuthorizePost.');
                    }

                localVarHeaderParams['user-agent'] = ObjectSerializer.serialize(userAgent, "string");
            (<any>Object).assign(localVarHeaderParams, options.headers);

            let localVarUseFormData = false;

            let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
                json: true,
                body: ObjectSerializer.serialize(UNKNOWN_BASE_TYPE, "UNKNOWN_BASE_TYPE")
            };

            let authenticationPromise = Promise.resolve();
                authenticationPromise = authenticationPromise.then(() => this.authentications.MemberBearerAuth.applyToRequest(localVarRequestOptions));

            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
            (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
            localVarRequestOptions.form = localVarFormParams;
            }
            }
            return new Promise<{ response: http.ClientResponse; body: InlineResponse200;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
            reject(error);
            } else {
                body = ObjectSerializer.deserialize(body, "InlineResponse200");
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
            resolve({ response: response, body: body });
            } else {
            reject(new HttpError(response, body, response.statusCode));
            }
            }
            });
            });
            });
            }
            /**
            * ## Backend 実装者向け情報 repository 内の処理でベリトランスから結果を取得済みであればDBの内容で返却、なければベリトランスに問い合わせ後DBに補完してから返す  ### Veritrans #### Documents - []結果情報取得API](https://www.veritrans.co.jp/developer/air/en/direct_api.html#search)  #### Fields (調査時に考えた内容のメモです) ##### Header - Authorization: Config経由の環境変数 ##### Parameters - request_id: (これのみでいいらしい) 
                * @param memberId 
                * @param itemId 
                * @param memberItemNegotiationId 
            */
            public async membersMemberIdItemsItemIdNegotiationsMemberItemNegotiationIdCreditAuthorizationsLatestGet (memberId: string, itemId: string, memberItemNegotiationId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: CreditAuthorization;  }> {
            const localVarPath = this.basePath + '/members/{memberId}/items/{itemId}/negotiations/{memberItemNegotiationId}/creditAuthorizations/latest'
                .replace('{' + 'memberId' + '}', encodeURIComponent(String(memberId)))
                .replace('{' + 'itemId' + '}', encodeURIComponent(String(itemId)))
                .replace('{' + 'memberItemNegotiationId' + '}', encodeURIComponent(String(memberItemNegotiationId)));
            let localVarQueryParameters: any = {};
            let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
                const produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
                } else {
                localVarHeaderParams.Accept = produces.join(',');
                }
            let localVarFormParams: any = {};

                    // verify required parameter 'memberId' is not null or undefined
                    if (memberId === null || memberId === undefined) {
                    throw new Error('Required parameter memberId was null or undefined when calling membersMemberIdItemsItemIdNegotiationsMemberItemNegotiationIdCreditAuthorizationsLatestGet.');
                    }

                    // verify required parameter 'itemId' is not null or undefined
                    if (itemId === null || itemId === undefined) {
                    throw new Error('Required parameter itemId was null or undefined when calling membersMemberIdItemsItemIdNegotiationsMemberItemNegotiationIdCreditAuthorizationsLatestGet.');
                    }

                    // verify required parameter 'memberItemNegotiationId' is not null or undefined
                    if (memberItemNegotiationId === null || memberItemNegotiationId === undefined) {
                    throw new Error('Required parameter memberItemNegotiationId was null or undefined when calling membersMemberIdItemsItemIdNegotiationsMemberItemNegotiationIdCreditAuthorizationsLatestGet.');
                    }

            (<any>Object).assign(localVarHeaderParams, options.headers);

            let localVarUseFormData = false;

            let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
                json: true,
            };

            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
            (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
            localVarRequestOptions.form = localVarFormParams;
            }
            }
            return new Promise<{ response: http.ClientResponse; body: CreditAuthorization;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
            reject(error);
            } else {
                body = ObjectSerializer.deserialize(body, "CreditAuthorization");
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
            resolve({ response: response, body: body });
            } else {
            reject(new HttpError(response, body, response.statusCode));
            }
            }
            });
            });
            });
            }
            /**
            * 
                * @param memberId 
                * @param itemId 
                * @param memberItemNegotiationId 
            */
            public async membersMemberIdItemsItemIdNegotiationsMemberItemNegotiationIdEstablishedPost (memberId: string, itemId: string, memberItemNegotiationId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
            const localVarPath = this.basePath + '/members/{memberId}/items/{itemId}/negotiations/{memberItemNegotiationId}/established'
                .replace('{' + 'memberId' + '}', encodeURIComponent(String(memberId)))
                .replace('{' + 'itemId' + '}', encodeURIComponent(String(itemId)))
                .replace('{' + 'memberItemNegotiationId' + '}', encodeURIComponent(String(memberItemNegotiationId)));
            let localVarQueryParameters: any = {};
            let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
                const produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
                } else {
                localVarHeaderParams.Accept = produces.join(',');
                }
            let localVarFormParams: any = {};

                    // verify required parameter 'memberId' is not null or undefined
                    if (memberId === null || memberId === undefined) {
                    throw new Error('Required parameter memberId was null or undefined when calling membersMemberIdItemsItemIdNegotiationsMemberItemNegotiationIdEstablishedPost.');
                    }

                    // verify required parameter 'itemId' is not null or undefined
                    if (itemId === null || itemId === undefined) {
                    throw new Error('Required parameter itemId was null or undefined when calling membersMemberIdItemsItemIdNegotiationsMemberItemNegotiationIdEstablishedPost.');
                    }

                    // verify required parameter 'memberItemNegotiationId' is not null or undefined
                    if (memberItemNegotiationId === null || memberItemNegotiationId === undefined) {
                    throw new Error('Required parameter memberItemNegotiationId was null or undefined when calling membersMemberIdItemsItemIdNegotiationsMemberItemNegotiationIdEstablishedPost.');
                    }

            (<any>Object).assign(localVarHeaderParams, options.headers);

            let localVarUseFormData = false;

            let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
                json: true,
            };

            let authenticationPromise = Promise.resolve();
                authenticationPromise = authenticationPromise.then(() => this.authentications.MemberBearerAuth.applyToRequest(localVarRequestOptions));

            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
            (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
            localVarRequestOptions.form = localVarFormParams;
            }
            }
            return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
            reject(error);
            } else {
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
            resolve({ response: response, body: body });
            } else {
            reject(new HttpError(response, body, response.statusCode));
            }
            }
            });
            });
            });
            }
            /**
            * 
                * @param memberId 
                * @param UNKNOWN_BASE_TYPE 
            */
            public async membersMemberIdItemsPost (memberId: string, UNKNOWN_BASE_TYPE?: UNKNOWN_BASE_TYPE, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: MemberItem;  }> {
            const localVarPath = this.basePath + '/members/{memberId}/items'
                .replace('{' + 'memberId' + '}', encodeURIComponent(String(memberId)));
            let localVarQueryParameters: any = {};
            let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
                const produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
                } else {
                localVarHeaderParams.Accept = produces.join(',');
                }
            let localVarFormParams: any = {};

                    // verify required parameter 'memberId' is not null or undefined
                    if (memberId === null || memberId === undefined) {
                    throw new Error('Required parameter memberId was null or undefined when calling membersMemberIdItemsPost.');
                    }

            (<any>Object).assign(localVarHeaderParams, options.headers);

            let localVarUseFormData = false;

            let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
                json: true,
                body: ObjectSerializer.serialize(UNKNOWN_BASE_TYPE, "UNKNOWN_BASE_TYPE")
            };

            let authenticationPromise = Promise.resolve();
                authenticationPromise = authenticationPromise.then(() => this.authentications.MemberBearerAuth.applyToRequest(localVarRequestOptions));

            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
            (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
            localVarRequestOptions.form = localVarFormParams;
            }
            }
            return new Promise<{ response: http.ClientResponse; body: MemberItem;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
            reject(error);
            } else {
                body = ObjectSerializer.deserialize(body, "MemberItem");
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
            resolve({ response: response, body: body });
            } else {
            reject(new HttpError(response, body, response.statusCode));
            }
            }
            });
            });
            });
            }
            /**
            * 
                * @param memberId 
            */
            public async membersMemberIdOneTimeTokensRegisterPost (memberId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: MemberOneTimeToken;  }> {
            const localVarPath = this.basePath + '/members/{memberId}/oneTimeTokens/register'
                .replace('{' + 'memberId' + '}', encodeURIComponent(String(memberId)));
            let localVarQueryParameters: any = {};
            let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
                const produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
                } else {
                localVarHeaderParams.Accept = produces.join(',');
                }
            let localVarFormParams: any = {};

                    // verify required parameter 'memberId' is not null or undefined
                    if (memberId === null || memberId === undefined) {
                    throw new Error('Required parameter memberId was null or undefined when calling membersMemberIdOneTimeTokensRegisterPost.');
                    }

            (<any>Object).assign(localVarHeaderParams, options.headers);

            let localVarUseFormData = false;

            let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
                json: true,
            };

            let authenticationPromise = Promise.resolve();
                authenticationPromise = authenticationPromise.then(() => this.authentications.MemberBearerAuth.applyToRequest(localVarRequestOptions));

            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
            (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
            localVarRequestOptions.form = localVarFormParams;
            }
            }
            return new Promise<{ response: http.ClientResponse; body: MemberOneTimeToken;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
            reject(error);
            } else {
                body = ObjectSerializer.deserialize(body, "MemberOneTimeToken");
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
            resolve({ response: response, body: body });
            } else {
            reject(new HttpError(response, body, response.statusCode));
            }
            }
            });
            });
            });
            }
            /**
            * 
                * @param memberId 
                * @param memberWithAddressRequestBody 
            */
            public async membersMemberIdPut (memberId: string, memberWithAddressRequestBody?: MemberWithAddressRequestBody, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
            const localVarPath = this.basePath + '/members/{memberId}'
                .replace('{' + 'memberId' + '}', encodeURIComponent(String(memberId)));
            let localVarQueryParameters: any = {};
            let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
                const produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
                } else {
                localVarHeaderParams.Accept = produces.join(',');
                }
            let localVarFormParams: any = {};

                    // verify required parameter 'memberId' is not null or undefined
                    if (memberId === null || memberId === undefined) {
                    throw new Error('Required parameter memberId was null or undefined when calling membersMemberIdPut.');
                    }

            (<any>Object).assign(localVarHeaderParams, options.headers);

            let localVarUseFormData = false;

            let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
                json: true,
                body: ObjectSerializer.serialize(memberWithAddressRequestBody, "MemberWithAddressRequestBody")
            };

            let authenticationPromise = Promise.resolve();
                authenticationPromise = authenticationPromise.then(() => this.authentications.MemberBearerAuth.applyToRequest(localVarRequestOptions));

            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
            (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
            localVarRequestOptions.form = localVarFormParams;
            }
            }
            return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
            reject(error);
            } else {
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
            resolve({ response: response, body: body });
            } else {
            reject(new HttpError(response, body, response.statusCode));
            }
            }
            });
            });
            });
            }
            /**
            * created_atの降順でresponseが返されます
                * @param memberId 
            */
            public async membersMemberIdToOfficeDeliveriesGet (memberId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<MemberToOfficeDelivery>;  }> {
            const localVarPath = this.basePath + '/members/{memberId}/toOfficeDeliveries'
                .replace('{' + 'memberId' + '}', encodeURIComponent(String(memberId)));
            let localVarQueryParameters: any = {};
            let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
                const produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
                } else {
                localVarHeaderParams.Accept = produces.join(',');
                }
            let localVarFormParams: any = {};

                    // verify required parameter 'memberId' is not null or undefined
                    if (memberId === null || memberId === undefined) {
                    throw new Error('Required parameter memberId was null or undefined when calling membersMemberIdToOfficeDeliveriesGet.');
                    }

            (<any>Object).assign(localVarHeaderParams, options.headers);

            let localVarUseFormData = false;

            let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
                json: true,
            };

            let authenticationPromise = Promise.resolve();
                authenticationPromise = authenticationPromise.then(() => this.authentications.MemberBearerAuth.applyToRequest(localVarRequestOptions));

            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
            (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
            localVarRequestOptions.form = localVarFormParams;
            }
            }
            return new Promise<{ response: http.ClientResponse; body: Array<MemberToOfficeDelivery>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
            reject(error);
            } else {
                body = ObjectSerializer.deserialize(body, "Array<MemberToOfficeDelivery>");
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
            resolve({ response: response, body: body });
            } else {
            reject(new HttpError(response, body, response.statusCode));
            }
            }
            });
            });
            });
            }
            /**
            * 
                * @param memberId 
                * @param UNKNOWN_BASE_TYPE 
            */
            public async membersMemberIdToOfficeDeliveriesPost (memberId: string, UNKNOWN_BASE_TYPE?: UNKNOWN_BASE_TYPE, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: MemberToOfficeDelivery;  }> {
            const localVarPath = this.basePath + '/members/{memberId}/toOfficeDeliveries'
                .replace('{' + 'memberId' + '}', encodeURIComponent(String(memberId)));
            let localVarQueryParameters: any = {};
            let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
                const produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
                } else {
                localVarHeaderParams.Accept = produces.join(',');
                }
            let localVarFormParams: any = {};

                    // verify required parameter 'memberId' is not null or undefined
                    if (memberId === null || memberId === undefined) {
                    throw new Error('Required parameter memberId was null or undefined when calling membersMemberIdToOfficeDeliveriesPost.');
                    }

            (<any>Object).assign(localVarHeaderParams, options.headers);

            let localVarUseFormData = false;

            let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
                json: true,
                body: ObjectSerializer.serialize(UNKNOWN_BASE_TYPE, "UNKNOWN_BASE_TYPE")
            };

            let authenticationPromise = Promise.resolve();
                authenticationPromise = authenticationPromise.then(() => this.authentications.MemberBearerAuth.applyToRequest(localVarRequestOptions));

            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
            (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
            localVarRequestOptions.form = localVarFormParams;
            }
            }
            return new Promise<{ response: http.ClientResponse; body: MemberToOfficeDelivery;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
            reject(error);
            } else {
                body = ObjectSerializer.deserialize(body, "MemberToOfficeDelivery");
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
            resolve({ response: response, body: body });
            } else {
            reject(new HttpError(response, body, response.statusCode));
            }
            }
            });
            });
            });
            }
            /**
            * 
                * @param UNKNOWN_BASE_TYPE 
            */
            public async membersRegisterPost (UNKNOWN_BASE_TYPE?: UNKNOWN_BASE_TYPE, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
            const localVarPath = this.basePath + '/members/register';
            let localVarQueryParameters: any = {};
            let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
                const produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
                } else {
                localVarHeaderParams.Accept = produces.join(',');
                }
            let localVarFormParams: any = {};

            (<any>Object).assign(localVarHeaderParams, options.headers);

            let localVarUseFormData = false;

            let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
                json: true,
                body: ObjectSerializer.serialize(UNKNOWN_BASE_TYPE, "UNKNOWN_BASE_TYPE")
            };

            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
            (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
            localVarRequestOptions.form = localVarFormParams;
            }
            }
            return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
            reject(error);
            } else {
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
            resolve({ response: response, body: body });
            } else {
            reject(new HttpError(response, body, response.statusCode));
            }
            }
            });
            });
            });
            }
            /**
            * 
                * @param UNKNOWN_BASE_TYPE 
            */
            public async membersRegisterVerifySmsPost (UNKNOWN_BASE_TYPE?: UNKNOWN_BASE_TYPE, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: AccessToken;  }> {
            const localVarPath = this.basePath + '/members/register/verifySms';
            let localVarQueryParameters: any = {};
            let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
                const produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
                } else {
                localVarHeaderParams.Accept = produces.join(',');
                }
            let localVarFormParams: any = {};

            (<any>Object).assign(localVarHeaderParams, options.headers);

            let localVarUseFormData = false;

            let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
                json: true,
                body: ObjectSerializer.serialize(UNKNOWN_BASE_TYPE, "UNKNOWN_BASE_TYPE")
            };

            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
            (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
            localVarRequestOptions.form = localVarFormParams;
            }
            }
            return new Promise<{ response: http.ClientResponse; body: AccessToken;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
            reject(error);
            } else {
                body = ObjectSerializer.deserialize(body, "AccessToken");
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
            resolve({ response: response, body: body });
            } else {
            reject(new HttpError(response, body, response.statusCode));
            }
            }
            });
            });
            });
            }
            /**
            * oneTimeTokenを元にaccessTokenを取得
                * @param oneTimeToken 
            */
            public async oneTimeTokensOneTimeTokenRevokePost (oneTimeToken: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: AccessToken;  }> {
            const localVarPath = this.basePath + '/oneTimeTokens/{oneTimeToken}/revoke'
                .replace('{' + 'oneTimeToken' + '}', encodeURIComponent(String(oneTimeToken)));
            let localVarQueryParameters: any = {};
            let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
                const produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
                } else {
                localVarHeaderParams.Accept = produces.join(',');
                }
            let localVarFormParams: any = {};

                    // verify required parameter 'oneTimeToken' is not null or undefined
                    if (oneTimeToken === null || oneTimeToken === undefined) {
                    throw new Error('Required parameter oneTimeToken was null or undefined when calling oneTimeTokensOneTimeTokenRevokePost.');
                    }

            (<any>Object).assign(localVarHeaderParams, options.headers);

            let localVarUseFormData = false;

            let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
                json: true,
            };

            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
            (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
            localVarRequestOptions.form = localVarFormParams;
            }
            }
            return new Promise<{ response: http.ClientResponse; body: AccessToken;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
            reject(error);
            } else {
                body = ObjectSerializer.deserialize(body, "AccessToken");
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
            resolve({ response: response, body: body });
            } else {
            reject(new HttpError(response, body, response.statusCode));
            }
            }
            });
            });
            });
            }
        }
